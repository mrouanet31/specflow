title,body,estimate,labels,assignee
"INIT-001: Initialiser monorepo","Créer la structure Nx (ou monorepo équivalent) avec modules frontend/, backend/, infra/. Acceptance: Repo créé avec README, license, .gitignore. CI minimal (build) passe.",3,"phase1,init,devops","DevOps"
"INIT-002: Templates PR & Issue","Ajouter PR template et issue template (bug/feature) au repo. Acceptance: templates présents et utilisés sur une PR test.",1,"phase1,process,po","PO"
"INIT-003: Conventions & Coding standards","Documenter conventions (formatting, lint rules, commit messages, branch strategy). Acceptance: CONTRIBUTING.md ajouté.",2,"phase1,process,tech","Tech Lead"
"INIT-004: Provisionnement env dev/staging","Provisionner namespace K8s pour dev/staging (ou Docker Compose), secrets skeleton. Acceptance: staging accessible, secrets manager connecté.",5,"phase1,infra,devops","DevOps"
"INIT-005: Esquisser schéma DB initial","Créer diagramme entité (User, Project, Spec, Task, Constitution) et scripts Flyway baseline. Acceptance: migration baseline s'exécute localement.",2,"phase1,db,backend","Backend"
"INFRA-101: CI pipeline PR checks","GitHub Actions PR pipeline: build backend, build frontend, unit tests, lint. Acceptance: PR pipeline vert sur commit de test.",5,"phase1,ci,devops","DevOps"
"INFRA-102: Docker images & publish","Dockerfile pour backend et frontend, publish to registry. Acceptance: images publiées avec tag.",3,"phase1,infra,devops","DevOps"
"AUTH-111: Implémenter endpoint /api/auth/login","Login avec email/password, password hashing (bcrypt/argon2), return access + refresh tokens. Acceptance: tests unitaires et integration valident flow.",5,"phase1,auth,backend","Backend"
"AUTH-112: Implémenter refresh token flow","Endpoint /api/auth/refresh pour renouveler access token. Acceptance: flow refresh testé.",3,"phase1,auth,backend","Backend"
"AUTH-113: RBAC & role model","Add roles (ADMIN, USER, VIEWER) and middleware annotations. Acceptance: endpoints sécurisés par rôle.",3,"phase1,auth,backend","Backend"
"INFRA-103: Provisionnement Postgres staging","Provision Postgres instance for staging, apply Flyway baseline. Acceptance: DB accessible and migrations applied.",2,"phase1,db,devops","DevOps"
"SEC-120: Secrets integration","Integrate GitHub Actions secrets with Vault/managed secrets. Acceptance: CI can pull secrets to run integration tests.",2,"phase1,security,devops","DevOps"
"INFRA-201: Monitoring basic (Prometheus)","Expose /actuator/prometheus metrics, configure Prometheus scraping. Acceptance: metrics visible in Prometheus.",3,"phase1,monitoring,devops","DevOps"
"INFRA-202: Central logging skeleton","Configure structured logging (JSON) and central collection (Loki/ELK). Acceptance: sample logs visible in central system.",3,"phase1,logging,devops","DevOps"
"WS-210: WebSocket skeleton (Spring WebSocket)","Implement WS endpoint with ping/pong and a simple pub/sub channel for notifications. Acceptance: frontend can connect and receive ping.",5,"phase1,websocket,backend","Backend"
"INFRA-203: Helm chart minimal / k8s manifests","Create Helm chart with deployment/service/ingress minimal. Acceptance: app deployable via helm to staging.",5,"phase1,infra,devops","DevOps"
"OPS-205: Backup plan DB for staging","Schedule backup snapshot for staging DB. Acceptance: backup exists and restore tested.",1,"phase1,ops,devops","DevOps"
"CONST-301: API CRUD /api/constitutions","Endpoints create/read/update/delete/list; versioning table ConstitutionVersion. Acceptance: integration tests cover CRUD + version creation.",8,"phase1,constitutions,backend","Backend"
"CONST-302: Markdown editor integration (frontend)","Integrate Monaco or ngx-markdown editor with preview and autosave draft. Acceptance: editor displays, preview updates, save persists via API.",8,"phase1,frontend,editor","Frontend"
"STORAGE-310: Attachments storage (S3-compatible)","Implement attachments upload endpoint and storage backed by S3 or PVC. Acceptance: upload/download works in staging.",3,"phase1,storage,backend","Backend"
"EXPORT-320: Export MD/PDF","Implement export to MD and PDF (wkhtmltopdf or similar). Acceptance: exported files downloadable.",3,"phase1,export,backend","Backend"
"TEST-330: Tests integration API Constitutions","Add integration tests for endpoints. Acceptance: CI runs integration tests green.",3,"phase1,testing,qa","QA"
"WS-401: Collaborative editing (optimistic updates)","Implement optimistic edit flow via WebSocket, simple locking fallback. Acceptance: two clients editing see near-real-time updates and conflict handled.",8,"phase1,workshop,frontend","Frontend"
"IA-410: Assistant stub endpoint","Provide a stub endpoint to return suggestion templates for spec sections. Acceptance: frontend can call and display suggestions.",2,"phase1,ia,backend","Backend"
"KANBAN-420: Tasks CRUD & Kanban UI","Task model, endpoints, Kanban board with drag & drop. Acceptance: create/move tasks persist and reflect across users.",8,"phase1,kanban,frontend","Frontend"
"NOTIF-430: Notification events via WS","Emit events for mentions, comments, task status changes; deliver via WS. Acceptance: receiving clients see notifications in real time.",3,"phase1,notifications,backend","Backend"
"UI-501: Design system tokens & Storybook","Define color tokens, typography, spacing; publish basic components in Storybook. Acceptance: storybook with core components accessible.",5,"phase1,design,frontend","Designer"
"UI-502: Integrate Angular Material + Tailwind tokens","Configure Tailwind + Angular Material theme with tokens. Acceptance: theme applied site-wide.",3,"phase1,ui,frontend","Frontend"
"QA-510: E2E scenarios (Cypress)","Implement E2E smoke tests: login, create constitution, create task, live update. Acceptance: tests green in CI.",5,"phase1,qa,testing","QA"
"ACCESS-520: Accessibility checks","Run basic a11y checks (contrast, keyboard nav) and fix critical issues. Acceptance: major a11y issues resolved.",2,"phase1,a11y,design","Designer"
"DOCS-601: Developer README + API OpenAPI","Write developer README, generate OpenAPI spec for APIs. Acceptance: README clear, OpenAPI accessible via /api/docs.",3,"phase1,docs,backend","Backend"
"RUNBOOK-610: Playbook deploy & rollback","Create deployment checklist, rollback steps, and runbook for incidents. Acceptance: runbook reviewed and stored.",3,"phase1,ops,devops","DevOps"
"PERF-620: Smoke load testing","Run basic load tests (smoke) on staging (auth + read paths). Acceptance: p95 latency within target or documented issues.",3,"phase1,performance,qa","QA"
"RELEASE-630: Release candidate & checklist","Prepare release notes, checklist, and validation sign-off. Acceptance: PO sign-off for release candidate.",2,"phase1,release,po","PO"
