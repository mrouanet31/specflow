name: Commitlint feedback

permissions:
  contents: read
  issues: write

on:
  workflow_run:
    workflows: ["Quality checks"]
    types: [completed]

jobs:
  comment:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install commitlint temporarily
        run: |
          name: Commitlint feedback

          permissions:
            contents: read
            issues: write

          on:
            workflow_run:
              workflows: ["Quality checks"]
              types: [completed]

          jobs:
            comment:
              if: ${{ github.event.workflow_run.conclusion == 'failure' }}
              runs-on: ubuntu-latest
              steps:
                - name: Checkout
                  uses: actions/checkout@v4

                - name: Setup Node
                  uses: actions/setup-node@v4
                  with:
                    node-version: '18'

                - name: Install commitlint temporarily
                  run: |
                    TMPDIR="$(pwd)/.commitlint_tmp"
                    mkdir -p "$TMPDIR"
                    pushd "$TMPDIR"
                    npm init -y >/dev/null 2>&1 || true
                    npm install --no-save @commitlint/config-conventional @commitlint/cli >/dev/null 2>&1 || true
                    popd

                - name: Run commitlint and save output
                  env:
                    GITHUB_EVENT_PATH: ${{ github.event_path }}
                  run: |
                    set -euo pipefail
                    BIN="./.commitlint_tmp/node_modules/.bin/commitlint"
                    export NODE_PATH="./.commitlint_tmp/node_modules"
                    PAYLOAD=$(cat "$GITHUB_EVENT_PATH")
                    PR_NUMBER=$(echo "$PAYLOAD" | jq -r '.workflow_run.pull_requests[0].number // empty')
                    FROM=$(echo "$PAYLOAD" | jq -r '.workflow_run.base_sha // empty')
                    TO=$(echo "$PAYLOAD" | jq -r '.workflow_run.head_sha // empty')
                    if [ -z "$FROM" ] && [ -n "$PR_NUMBER" ]; then
                      FROM=$(echo "$PAYLOAD" | jq -r '.workflow_run.pull_requests[0].base.sha // empty')
                    fi
                    if [ -z "$TO" ] && [ -n "$PR_NUMBER" ]; then
                      TO=$(echo "$PAYLOAD" | jq -r '.workflow_run.pull_requests[0].head.sha // empty')
                    fi
                    if [ -n "$PR_NUMBER" ]; then
                      BASE_REF=$(echo "$PAYLOAD" | jq -r '.workflow_run.pull_requests[0].base.ref // empty')
                      git fetch origin +"refs/pull/${PR_NUMBER}/head":refs/remotes/origin/pr/${PR_NUMBER} >/dev/null 2>&1 || true
                      if [ -n "$BASE_REF" ]; then
                        git fetch origin "refs/heads/${BASE_REF}":refs/remotes/origin/${BASE_REF} >/dev/null 2>&1 || true
                        MERGE_BASE=$(git merge-base refs/remotes/origin/${BASE_REF} refs/remotes/origin/pr/${PR_NUMBER} 2>/dev/null || true)
                      else
                        MERGE_BASE=$(git merge-base origin/${TO} refs/remotes/origin/pr/${PR_NUMBER} 2>/dev/null || true)
                      fi
                      if [ -n "$MERGE_BASE" ] && [ "$MERGE_BASE" != "" ]; then
                        FROM=$MERGE_BASE
                      fi
                    fi
                    echo "PR=$PR_NUMBER FROM=$FROM TO=$TO" > commitlint_output.txt
                    if [ -n "$PR_NUMBER" ] && [ -x "$BIN" ] && [ -n "$FROM" ] && [ -n "$TO" ]; then
                      "$BIN" --from="$FROM" --to="$TO" 2>&1 | sed -n '1,4000p' >> commitlint_output.txt || true
                    else
                      echo "Skipping commitlint: PR=$PR_NUMBER FROM=$FROM TO=$TO" > commitlint_output.txt
                    fi

                - name: Post PR comment with commitlint output
                  uses: actions/github-script@v6
                  env:
                    COMMENT_TOKEN: ${{ secrets.COMMIT_COMMENT_TOKEN }}
                  with:
                    script: |
                      const fs = require('fs');
                      const { Octokit } = require('octokit');
                      const token = process.env.COMMENT_TOKEN || process.env.GITHUB_TOKEN || '';
                      if (!token) return;
                      const octokit = new Octokit({ auth: token });
                      const eventPath = process.env.GITHUB_EVENT_PATH;
                      if (!eventPath || !fs.existsSync(eventPath)) return;
                      const payload = JSON.parse(fs.readFileSync(eventPath, 'utf8'));
                      const run = payload.workflow_run;
                      if (!run) return;
                      const prs = run.pull_requests || [];
                      if (!prs || prs.length === 0) return;
                      const prNumber = prs[0].number;
                      const output = fs.readFileSync('commitlint_output.txt', 'utf8').slice(0,4000);
                      const body = ['Hello! The commit message checks failed on this PR.','', 'commitlint output (truncated):','```', output, '```','', 'See CONTRIBUTING.md for the required format.'].join('\n');
                      await octokit.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, body });
