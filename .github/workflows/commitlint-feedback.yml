name: Commitlint feedback

permissions:
  contents: read
  issues: write

on:
  workflow_run:
    workflows: ["Quality checks"]
    types: [completed]

jobs:
  comment:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: "18"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache commitlint node_modules
        uses: actions/cache@v4
        with:
          path: ./.commitlint_tmp/node_modules
          key: commitlint-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('commitlint.config.js') }}
          restore-keys: |
            commitlint-${{ runner.os }}-node-

      - name: Install commitlint temporarily
        run: |
          TMPDIR="$(pwd)/.commitlint_tmp"
          mkdir -p "$TMPDIR"
          pushd "$TMPDIR"
          npm init -y || true
          # Install only if node_modules is missing or incomplete; cache will speed this up on hits
          # Do not silence npm install errors so failures are visible and fail the job when relevant
          npm install --no-save @commitlint/config-conventional @commitlint/cli
          popd

      - name: Run commitlint and save output
        env:
          GITHUB_EVENT_PATH: ${{ github.event_path }}
        run: |
          set -euo pipefail
          BIN="./.commitlint_tmp/node_modules/.bin/commitlint"
          # Allow Node to load modules from the temporary install
          export NODE_PATH="./.commitlint_tmp/node_modules"
          PAYLOAD=$(cat "$GITHUB_EVENT_PATH")
          PR_NUMBER=$(echo "$PAYLOAD" | jq -r '.workflow_run.pull_requests[0].number // empty')
          # Try several fallbacks for FROM/TO so we don't run commitlint with null shas
          FROM=$(echo "$PAYLOAD" | jq -r '.workflow_run.base_sha // empty')
          TO=$(echo "$PAYLOAD" | jq -r '.workflow_run.head_sha // empty')
          if [ -z "$FROM" ] && [ -n "$PR_NUMBER" ]; then
            # Try to read the PR base sha from the pull_requests object
            FROM=$(echo "$PAYLOAD" | jq -r '.workflow_run.pull_requests[0].base.sha // empty')
          fi
          if [ -z "$TO" ] && [ -n "$PR_NUMBER" ]; then
            TO=$(echo "$PAYLOAD" | jq -r '.workflow_run.pull_requests[0].head.sha // empty')
          fi
          # If FROM is still empty but TO is present, try a merge-base fallback
          if [ -z "$FROM" ] && [ -n "$TO" ]; then
            # Ensure we have refs to compute merge-base
            git fetch origin --no-tags --prune --depth=1 || git fetch origin --no-tags || true
            # Attempt to compute merge-base against origin/main (fallback) â€” adjust if your default branch differs
            FROM=$(git merge-base origin/main "$TO" || true)
          fi
          echo "PR=$PR_NUMBER FROM=$FROM TO=$TO" > commitlint_output.txt
          if [ -n "$PR_NUMBER" ] && [ -x "$BIN" ] && [ -n "$FROM" ] && [ -n "$TO" ]; then
            echo "Running commitlint --from=$FROM --to=$TO" >> commitlint_output.txt
            "$BIN" --from="$FROM" --to="$TO" 2>&1 | sed -n '1,4000p' >> commitlint_output.txt || true
          else
            echo "Skipping commitlint run: binary present=$([ -x \"$BIN\" ] && echo yes || echo no), PR_number=$PR_NUMBER, FROM=$FROM, TO=$TO" >> commitlint_output.txt
          fi

      - name: Set comment token
        env:
          COMMIT_COMMENT_TOKEN: ${{ secrets.COMMIT_COMMENT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Prefer a user-provided PAT in COMMIT_COMMENT_TOKEN when available.
          if [ -n "${COMMIT_COMMENT_TOKEN:-}" ]; then
            echo "COMMENT_TOKEN=${COMMIT_COMMENT_TOKEN}" >> $GITHUB_ENV
          else
            echo "COMMENT_TOKEN=${GITHUB_TOKEN}" >> $GITHUB_ENV
          fi

      - name: Debug which token is used
        run: |
          # Print which token source is selected (do not print the token itself)
          if grep -q '^COMMENT_TOKEN=' $GITHUB_ENV; then
            # Determine whether COMMENT_TOKEN matches the PAT secret (length heuristic) or the GITHUB_TOKEN pattern
            VAL=$(grep '^COMMENT_TOKEN=' $GITHUB_ENV | cut -d'=' -f2-)
            LEN=${#VAL}
            if [ "$LEN" -gt 40 ]; then
              echo "Using COMMIT_COMMENT_TOKEN (likely PAT)"
            else
              echo "Using GITHUB_TOKEN or short token"
            fi
          else
            echo "No COMMENT_TOKEN set"
          fi

      - name: Post PR comment with commitlint output
        uses: actions/github-script@v6
        env:
          COMMENT_TOKEN: ${{ env.COMMENT_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const token = process.env.COMMENT_TOKEN;
            if (!token) return;
            // Use the github client provided by actions/github-script to ensure correct auth/context
            const octokit = github.getOctokit(token);
            // Read the event payload directly from the event file to avoid relying on context.payload
            const eventPath = process.env.GITHUB_EVENT_PATH;
            if (!eventPath || !fs.existsSync(eventPath)) return;
            const payload = JSON.parse(fs.readFileSync(eventPath, 'utf8'));
            const run = payload.workflow_run;
            if (!run) return;
            const prs = run.pull_requests || [];
            if (!prs || prs.length === 0) return;
            const prNumber = prs[0].number;
            const output = fs.readFileSync('commitlint_output.txt', 'utf8').slice(0, 4000);
            const fromSha = run.base_sha || '';
            const toSha = run.head_sha || '';
            const bodyLines = [
              'Hello! The commit message checks failed on this PR.',
              '',
              'commitlint output (truncated):',
              '```',
              output,
              '```',
              '',
              'You can reproduce locally by running:',
              './scripts/setup-dev.sh',
              `./.commitlint_tmp/node_modules/.bin/commitlint --from=${fromSha} --to=${toSha}`,
              '',
              'See CONTRIBUTING.md for the required format.'
            ];
            const body = bodyLines.join('\n');
            await octokit.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body,
            });
